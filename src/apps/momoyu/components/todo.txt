component 目录名不对

应该是 components，这是全世界通用标准
todo 这些类型都可以去掉，可以他可以自动推导， atom<Array> -> atom
todo 你这种写法叫做 自定义 Hook，函数名的取名规则是 useXXX()
注：这个todo指的不是普通函数，而是返回数组的函数
todo 这里的 if else 本质上是可以完全优化掉的， 没有 if else 这种东西
这里是将if转换为切换序号
todo 这里的思路错了，主题切换和字体大小，完全可以直接写在标签上，然后 onMouseDown={item.onMethod} 也是直接写内联函数，一切都很自然
todo 这种一次性表达式需要内联在 标签里，直接铺上去，不要间接
保留数组，循环写在html代码中
todo useEffect 应该放在 useState useRef useAtom 的后面，保持整齐。 他一般是放在最后的，不要中间插一个 useEffect
todo 大部分情况下，不要声明一个空数组，然后再往里面加东西。
todo 学习一下 数据不可变 这个思想
todo 学习代码思想： 纯函数、不可变性、原子性
todo css className 的命名规范是 span-one，中划线连接
todo 尽量不要使用 for循环，使用 map 代替
todo 这里的表达式可以优化成 setScrolltop(document.documentElement.scrollTop >= 100 ? 30 : 85)
原本是简单的if语句
todo 这里的代码问题很大，思考一下能不能用 CSS 直接替换掉
这里使用flex布局+order解决排序问题
todo 学习一下 less 的语法，这里的选择器都可以变得很简洁
todo 仍然没有彻底理解 原子状态和衍生状态，简单来说，这里的改变主题色，只能使用一次 setXXX()，其他状态通过这个 xxx 属性衍生出来
只要用了超过1次set就必定是错的
todo 这里的 svg 应该给他取个名字， 不要用 SvgList[0] 这种方式引用，不然不知道是什么意思，不好维护
todo 遮罩层直接写在弹窗组件里，与弹窗内容并列，依靠fixed，四个方向全0，来实现固化阴影
todo 这个 scrollTop 没用，他官方完全没有靠 JS 去控制滚动条的位置，而是通过 CSS 控制的。包括 useEffect 全都可以删掉
这个用sticky实现，注意：当使用sticky时，开始sticky定位的元素需要有高度，不然sticky会无效
todo 这个组件是多余的，抽得比较混乱。一般组件抽象，不要搞太多参数，如果参数很多，这个组件就不封装了
像 MySvg 那种比较适合，而且经常能用的，才封
另外的情况，就是根据界面分割，Header、Middle、Footer，这种要分出来。这个 Item 就不用封装了
todo 取值的时候，不要用很长的链条去取， props.xxx.yyy.zzz 这种代码，简化掉，最多只有一层
const {NewValue} = props
const {id, title, number} = NewValue
这样，后续所有代码都记住
todo 用一堆 useRef 说明思路错了，这东西不应该常用，最多只有很少的情况需要用
todo 纯数据驱动的思路，不要直接操作 DOM
TODO 这个数组的命名不对，只有组件和 jotai 的状态才需要大驼峰。 命名也不对，应该是 firstTitleList
todo 你这里的 unWorkList[4]  和 workList[4]，先放到配置里然后再引用，是多此一举了，可以直接把具体的文案写这里，其他所有地方都改一下
todo 学习一下 await 的用法，你这个用得不对， 又形成了很多层嵌套， await 本身就是用来让 代码变扁平的，你这样写就没用了
const res = await axios.get('https://my-repository-orcin-beta.vercel.app' +)
const { data } = res或是const { data } = res.data
使用data进行操作
await只能在前面标注async的函数里面使用，它可以将后面的promise对象/数组转化成正常对象/数组
注：该转换只在函数中生效，async的返回值必定是promise形式的
todo 你的很多命名依然不规范，是 sendAjax()，所有单词记得大小写要区分清楚
注：这个sendAjax()是个函数
todo 这个函数是多余的，直接把表达式写在外面就行了，别做这种多余的函数
todo 后续所有变量声明全部用 const，禁用 let，学习一下 数据不可变这个思想
todo 没理解为什么实现一个效果需要这么多行代码，永远要记得不要重复代码，重复三次就要亮红灯了，不要一直复制粘贴同样的东西
todo 我说的简化不是指把他弄成简写，然后还是有这些逻辑，而是从顶层思考，把这些逻辑全部消除掉。彻底归零
todo 这里的思路很简单，通过数组分类，依次输出就行了，这些 CSS 要全部删掉，重新从顶层思考
数组进行分类，map进行展示，jotai决定调用数组的哪一部分展示
todo Refresh 别简写，语义化不行
原本是re
todo 'https://my-repository-orcin-beta.vercel.app' + props.name，这个学习一下 模板字符串的用法，  反引号 `${props.name}`
todo 这里还用 await 说明没完全理解， res.data 已经是一个普通值了，不需要再 await 了
await用一次即可全部变为普通值
todo 这里写得有点混乱，你其实是想点击刷新按钮的时候，刷新具体的网站的数据，所以你才会需要弄数组去管理他，然后再传入 number 来指定。
这些都是多余的动作，你直接封装一个 热榜组件，然后把 网络请求写在这个组件里，你所有操作都只需要写一遍就解决了，也不需要一直管理这么多状态
todo 系统学习一下 箭头函数，你这里写的 不能有 {}，理解比较片面。
你看到的啥也筛选不出来是因为他本质上等于这样
console.log(array.filter((item) => {
        item > 1
        return undefined
    }))
箭头函数没有括号则视为前面自带return,有括号则代表要手动设置
todo 不需要声明一个函数，然后再调用他返回，直接调用就行
直接把函数return后面的值用作赋值
todo 这写法换汤不换药，还是要改，要把 number 直接去掉，不要再依赖 number了，每个组件都是独立的

todo 这里的思路不应该是 Icons 这么一个小数组，而是一个包含热榜所有数据的大数组，一个对象包含一个热榜的所有数据
todo 这个没干掉
export const MessAge = atom([[], [], [], [], [], [], [], [], [], [], [], [], [], []])
这两个todo的解决方式是直接将Icons与MessAge合并在一起
todo 这里应该整体是一个 <RankItem> ，组件里直接包含所有东西了
// todo 改成基于 fetch() 去实现， XML 属于比较老的方法了
// todo 再实现一个 函数式版本的 eventBus
